#!/usr/bin/env python

"""
vrp.py:

Class instance for the base VRP.
"""

import numpy as np
from random import shuffle


class VRP:
    """
    Implementation for the individual that contains the solution to the VRP
    and some of its extensions. The behaviour of the individuals are defined
    in modules that define population initializers, evaluators, parent selectors,
    crossover operators, mutation operators and validators.
    """

    population_initializer = None
    evaluator = None
    parent_selector = None
    crossover_operator = None
    mutation_operators = None

    def __init__(self,
                 node_count,
                 vehicle_count,
                 depot_node_list,
                 optional_node_list):
        """
        Constructor for an individual of the population. A random solution is generated by an initializer
        that was selected during algorithm bootup.
        :param node_count: Number of nodes considered in the problem. Depot nodes are included.
        :param vehicle_count: Number of vehicles that are used for the problem.
        :param depot_node_list: List of nodes that represent the depot nodes.
        :param optional_node_list: List of nodes that represent optional nodes, ones that
        do not have to be visited.
        """

        self.individual_id = None

        self.node_count = node_count
        self.vehicle_count = vehicle_count
        self.depot_node_list = depot_node_list
        self.optional_node_list = optional_node_list

        # Solution of the problem is maintained as a list.
        # - A route is started by a depot node.
        # - Solution always starts with a depot node.
        # - After a solution has been created/modified, nearest depot node
        #   is moved to the beginning of the solution.
        # - If there are consecutive depot nodes, the last one is considered,
        #   as long as it is not the final element in the list.
        # - Consecutive depot nodes at the end are ignored.
        # TODO: Initialize solution with an initializer function.
        # self.solution = population_initializer()
        self.solution = list(range(self.node_count))
        shuffle(self.solution)

        # In VRPP, some nodes can remain unvisited. Those are kept here.
        self.unvisited_nodes = optional_node_list

        # Fitness value of the individual, evaluated by some other module.
        self.fitness = np.inf

        # With some constraints present, some solutions may not be valid.
        # Validity is check by some other module, and it leaves its mark here.
        self.valid = False

    def print(self):
        """
        Prints unique information about the individual.
        """

        route_set = []
        route_j = []
        for i in self.solution:
            if i in self.depot_node_list:
                if len(route_j) > 1:
                    route_set.append(route_j)
                route_j = []
            route_j.append(i)

        print("-------------------------------------------------")
        print("- Individual ID: {} ".format(self.individual_id if self.individual_id is not None else "None"))
        print("- Solution:")
        for i in range(1, len(route_set) + 1):
            print("- Route {}: {}".format(i, route_set[i - 1]))
        print("- Fitness: {}".format(self.fitness))
        print("- Valid: {}".format(self.valid))
